# initialise ####
# load packages
library(ggplot2); library(bbmle)
# set wd from script file path
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# source RL models
source("mod.1LR.r")
# load data frame
input <- list.files(path = "data/")
learning <- do.call("rbind", lapply(paste("data/",input,sep=""), read.csv, header=T))
# some variable recoding
learning$trial <- learning$loopTraining.thisN
learning <- learning[complete.cases(learning$trial),]
learning$trial <- learning$trial+1
learning$stim_left <- gsub(x = learning$stim_left,pattern = "images/",replacement = "")
learning$stim_left <- gsub(x = learning$stim_left,pattern = ".jpg",replacement = "")
learning$stim_right <- gsub(x = learning$stim_right,pattern = "images/",replacement = "")
learning$stim_right <- gsub(x = learning$stim_right,pattern = ".jpg",replacement = "")
learning$choice <- NA
learning$reward <- NA
for(n in 1:length(learning$trial)){
if(learning$key.clicked_name[n]=="pic_left"){
learning$choice[n] <- learning$stim_left[n]
}else{
learning$choice[n] <- learning$stim_right[n]
}
if(learning$reward[n]==learning$correct[n]){
learning$reward[n] <- 1
}else{
learning$reward[n] <- 0
}
}
learning$correct
learning$key.corr
learning$choice <- NA
learning$reward <- NA
for(n in 1:length(learning$trial)){
if(learning$key.clicked_name[n]=="pic_left"){
learning$choice[n] <- learning$stim_left[n]
}else{
learning$choice[n] <- learning$stim_right[n]
}
if(learning$reward[n]==learning$key.corr[n]){
learning$reward[n] <- 1
}else{
learning$reward[n] <- 0
}
}
learning$key.corr
learning$reward
learning$feedback
learning$choice
learning$key.leftButton
View(learning)
learning$key.clicked_name
for(n in 1:length(learning$trial)){
if(learning$key.clicked_name[n]=="pic_left"){
learning$choice[n] <- learning$stim_left[n]
}else{
learning$choice[n] <- learning$stim_right[n]
}
if(learning$feedback[n]==learning$key.clicked_name[n]){
learning$reward[n] <- 1
}else{
learning$reward[n] <- 0
}
}
learning$correct<- learning$key.corr
rw.mod <- learning[,c("trial","choice","reward","correct","is_valid")]
View(learning)
# fitting one participant
mle2(mod.1LR.fit,start=list(a=runif(1),b=runif(1)),method = "L-BFGS",lower=0,upper=30)
# load data frame
input <- list.files(path = "data/")
learning <- do.call("rbind", lapply(paste("data/",input,sep=""), read.csv, header=T))
# some variable recoding
learning$trial <- learning$loopTraining.thisN
learning <- learning[complete.cases(learning$trial),]
learning$trial <- learning$trial+1
learning$stim_left <- gsub(x = learning$stim_left,pattern = "images/",replacement = "")
learning$stim_left <- gsub(x = learning$stim_left,pattern = ".jpg",replacement = "")
learning$stim_right <- gsub(x = learning$stim_right,pattern = "images/",replacement = "")
learning$stim_right <- gsub(x = learning$stim_right,pattern = ".jpg",replacement = "")
learning$choice <- NA
learning$reward <- NA
for(n in 1:length(learning$trial)){
if(learning$key.clicked_name[n]=="pic_left"){
learning$choice[n] <- learning$stim_left[n]
}else{
learning$choice[n] <- learning$stim_right[n]
}
if(learning$feedback[n]==learning$key.clicked_name[n]){
learning$reward[n] <- 1
}else{
learning$reward[n] <- 0
}
}
learning$correct<- learning$key.corr
learning$correct
learning$reward
learning$feedback
learning$key.clicked_name
View(learning)
learning$feedback
gsub(x=learning$feedback,pattern = "\\]\\",replacement="")
gsub(x=learning$feedback,pattern = "\\]/\\",replacement="")
gsub(x=learning$feedback,pattern = "]",replacement="")
gsub(x=learning$feedback,pattern = "[]",replacement="")
gsub(x=learning$feedback,pattern = c("]","["),replacement="")
learning$feedback <- gsub(x=learning$feedback,pattern = c("]"),replacement="")
learning$feedback
learning$feedback <- gsub(x=learning$feedback,pattern = c("["),replacement="")
learning$feedback
learning$key.clicked_name
input <- list.files(path = "data/")
learning <- do.call("rbind", lapply(paste("data/",input,sep=""), read.csv, header=T))
# some variable recoding
learning$trial <- learning$loopTraining.thisN
learning <- learning[complete.cases(learning$trial),]
learning$trial <- learning$trial+1
learning$stim_left <- gsub(x = learning$stim_left,pattern = "images/",replacement = "")
learning$stim_left <- gsub(x = learning$stim_left,pattern = ".jpg",replacement = "")
learning$stim_right <- gsub(x = learning$stim_right,pattern = "images/",replacement = "")
learning$stim_right <- gsub(x = learning$stim_right,pattern = ".jpg",replacement = "")
gsub(x=learning$feedback,pattern = c("]'"),replacement="")
gsub(x=learning$feedback,pattern = c("]'"),replacement="")
gsub(x=learning$feedback,pattern = c("]"),replacement="")
gsub(x=learning$feedback,pattern = c("["),replacement="")
gsub(x=learning$feedback,pattern = c("\\[\\"),replacement="")
gsub(x=learning$feedback,pattern = c("\\[\\"),replacement="")
gsub(x=learning$feedback,pattern = c("\\[\\"),replacement="")
gsub(x=learning$feedback,pattern = c("\\[\\"),replacement="")
gsub(x=learning$feedback,pattern = c("\\[\\"),replacement="")
learning$choice <- NA
learning$reward <- NA
learning$correct
learning$feedback[n]==learning$correct[n]
n
learning$key.corr
learning$correct
learning$key.clicked_name
learning$feedback[n]
gsub(x=learning$key.clicked_name,pattern = "\\[|\\]",replacement = "")
learning$key.clicked_name <- gsub(x=learning$key.clicked_name,pattern = "\\[|\\]",replacement = "")
learning$choice <- NA
learning$reward <- NA
for(n in 1:length(learning$trial)){
if(learning$key.clicked_name[n]=="pic_left"){
learning$choice[n] <- learning$stim_left[n]
}else{
learning$choice[n] <- learning$stim_right[n]
}
if(learning$feedback[n]==learning$key.clicked_name[n]){
learning$reward[n] <- 1
}else{
learning$reward[n] <- 0
}
}
learning$reward
learning$key.clicked_name
learning$feedback
gsub(x=learning$feedback,pattern = "\\[|\\]",replacement = "")
gsub(x=learning$feedback,pattern = "\\'[|\\]'",replacement = "")
gsub(x=learning$feedback,pattern = "\\[|\\]",replacement = "")
learning$feedback<- gsub(x=learning$feedback,pattern = "\\[|\\]",replacement = "")
learning$feedback
gsub(x=learning$feedback,pattern = "''",replacement = "")
gsub(x=learning$feedback,pattern = "'|'",replacement = "")
learning$feedback<- gsub(x=learning$feedback,pattern = "'|'",replacement = "")
learning$choice <- NA
learning$reward <- NA
for(n in 1:length(learning$trial)){
if(learning$key.clicked_name[n]=="pic_left"){
learning$choice[n] <- learning$stim_left[n]
}else{
learning$choice[n] <- learning$stim_right[n]
}
if(learning$feedback[n]==learning$key.clicked_name[n]){
learning$reward[n] <- 1
}else{
learning$reward[n] <- 0
}
}
learning$reward
learning$correct<- learning$key.corr
learning$correct
rw.mod <- learning[,c("trial","choice","reward","correct","is_valid")]
# fitting one participant
mle2(mod.1LR.fit,start=list(a=runif(1),b=runif(1)),method = "L-BFGS",lower=0,upper=30)
# plot
# correct choice
mean(rw.mod$correct)
ggplot(rw.mod, aes(x=trial, y=correct))+ theme_minimal()+ geom_line()
# values
colors <- c("round candy"="orange","squared candy"="red")
ggplot(rw.mod,aes(x=trial)) + theme_minimal()+
geom_line(aes(y=round.1.value, color="round candy"))+
geom_line(aes(y=squared.1.value, color="squared candy"))+
scale_color_manual(values=colors)+labs(color="legend")+
ylab("Choice values")
# choice probabilities
ggplot(rw.mod,aes(x=trial)) + theme_minimal()+
geom_line(aes(y=round.choice.prob, color="round candy"))+
geom_line(aes(y=squared.choice.prob, color="squared candy"))+
scale_color_manual(values=colors)+labs(color="legend")+
ylab("Choice probabilities")
# load packages
library(ggplot2); library(bbmle)
# set wd from script file path
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# source RL models
source("mod.1LR.r")
# load data frame
input <- list.files(path = "data/")
learning <- do.call("rbind", lapply(paste("data/",input,sep=""), read.csv, header=T))
# some variable recoding
learning$trial <- learning$loopTraining.thisN
learning <- learning[complete.cases(learning$trial),]
learning$trial <- learning$trial+1
learning$stim_left <- gsub(x = learning$stim_left,pattern = "images/",replacement = "")
learning$stim_left <- gsub(x = learning$stim_left,pattern = ".jpg",replacement = "")
learning$stim_right <- gsub(x = learning$stim_right,pattern = "images/",replacement = "")
learning$stim_right <- gsub(x = learning$stim_right,pattern = ".jpg",replacement = "")
learning$feedback<- gsub(x=learning$feedback,pattern = "\\[|\\]",replacement = "")
learning$feedback<- gsub(x=learning$feedback,pattern = "'|'",replacement = "")
learning$choice <- NA
learning$reward <- NA
for(n in 1:length(learning$trial)){
if(learning$key.clicked_name[n]=="pic_left"){
learning$choice[n] <- learning$stim_left[n]
}else{
learning$choice[n] <- learning$stim_right[n]
}
if(learning$feedback[n]==learning$key.clicked_name[n]){
learning$reward[n] <- 1
}else{
learning$reward[n] <- 0
}
}
learning$reward
learning$correct<- learning$key.corr
# initialise ####
# load packages
library(ggplot2); library(bbmle)
# set wd from script file path
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# source RL models
source("mod.1LR.r")
# load data frame
input <- list.files(path = "data/")
learning <- do.call("rbind", lapply(paste("data/",input,sep=""), read.csv, header=T))
# some variable recoding
learning$trial <- learning$loopTraining.thisN
learning <- learning[complete.cases(learning$trial),]
learning$trial <- learning$trial+1
learning$stim_left <- gsub(x = learning$stim_left,pattern = "images/",replacement = "")
learning$stim_left <- gsub(x = learning$stim_left,pattern = ".jpg",replacement = "")
learning$stim_right <- gsub(x = learning$stim_right,pattern = "images/",replacement = "")
learning$stim_right <- gsub(x = learning$stim_right,pattern = ".jpg",replacement = "")
learning$feedback<- gsub(x=learning$feedback,pattern = "\\[|\\]",replacement = "")
learning$feedback<- gsub(x=learning$feedback,pattern = "'|'",replacement = "")
learning$choice <- NA
learning$reward <- NA
for(n in 1:length(learning$trial)){
if(learning$key.clicked_name[n]=="pic_left"){
learning$choice[n] <- learning$stim_left[n]
}else{
learning$choice[n] <- learning$stim_right[n]
}
if(learning$feedback[n]==learning$key.clicked_name[n]){
learning$reward[n] <- 1
}else{
learning$reward[n] <- 0
}
}
learning$reward
learning$correct<- learning$key.corr
rw.mod <- learning[,c("trial","choice","reward","correct","is_valid")]
learning$reward
learning$correct<- learning$key.corr
learning$correct
rw.mod <- learning[,c("trial","choice","reward","correct","is_valid")]
# fitting one participant
mle2(mod.1LR.fit,start=list(a=runif(1),b=runif(1)),method = "L-BFGS",lower=0,upper=30)
# plot
# correct choice
mean(rw.mod$correct)
ggplot(rw.mod, aes(x=trial, y=correct))+ theme_minimal()+ geom_line()
# values
colors <- c("round candy"="orange","squared candy"="red")
ggplot(rw.mod,aes(x=trial)) + theme_minimal()+
geom_line(aes(y=round.1.value, color="round candy"))+
geom_line(aes(y=squared.1.value, color="squared candy"))+
scale_color_manual(values=colors)+labs(color="legend")+
ylab("Choice values")
# choice probabilities
ggplot(rw.mod,aes(x=trial)) + theme_minimal()+
geom_line(aes(y=round.choice.prob, color="round candy"))+
geom_line(aes(y=squared.choice.prob, color="squared candy"))+
scale_color_manual(values=colors)+labs(color="legend")+
ylab("Choice probabilities")
